import Init.Data.List.Nat.TakeDrop
import Mathlib.Data.NNReal.Basic
import Mathlib.Data.PNat.Basic
import Mathlib.Data.Real.Basic
import Mathlib.Analysis.Normed.Group.Basic
import Mathlib.Algebra.MonoidAlgebra.Basic
import Mathlib.Data.Int.Interval


section Structures

structure OneNat where
  fst : ‚Ñï

structure TwoNat where
  pair ::
  fst : ‚Ñï
  snd : ‚Ñï

structure Couple where
  left : ‚Ñï
  right : ‚Ñï

structure OneNatOneInt where
  fst : ‚Ñï
  snd : ‚Ñ§

structure Mess (Œ± Œ≤ Œ≥ : Type) [Zero Œ±] [TopologicalSpace Œ≤] [UniformSpace Œ≥] :=--`where` or `:=`
  a : Œ± := 0
  f : Œ± ‚Üí Œ≤ ‚Üí Œ≥ ‚Üí Œ≥
  cont : Continuous (f a)

-- `‚åò`


-- This forgets the label and takes it back.
example (x : OneNat) : TwoNat :=
  {x with snd := x.1}

-- another syntax
example (x : OneNat) : TwoNat where
  __ := x
  snd := x.1

example (x : TwoNat) : OneNat := {x with} --without the `with` the extra-field is not thrown away

example (x : TwoNat) : OneNat where
 __ := x

-- example (x : OneNat) : Couple := x -- `type mismatch`

example (x : OneNat) : Couple := sorry-- {x with left := x.1} fields missing: 'right'
--so, it does not "populate missing fields with the first available type-correct term: labels matter"

example (x : OneNat) : ‚Ñï := sorry--{x with}

structure Mix where
  fst : ‚Ñï
  right : ‚Ñï

#check Mix.mk

def mix1 (x : TwoNat) (y : Couple) : Mix :=
  {x, y with}
/- remember that `x := {x.fst, x.snd}`, `y = {y.left, y.right}`
  and `Mix.mk` takes a `fst : ‚Ñï` and `right : ‚Ñï`: s we need to throw away `x.snd` and `y.left`-/

def mix1' (x : TwoNat) (y : Couple) : Mix where
  __ := x
  __ := y

-- the order does not really matter, it "destructs and reconstructs".
def mix2 (x : TwoNat) (y : Couple) : Mix :=
  {y, x with}


example : mix1 = mix1' := rfl

example : mix1 = mix2 := rfl

-- yet, if there are two identical fields, it is the first that is picked:
def ord (x‚ÇÅ x‚ÇÇ : TwoNat) : Mix := {x‚ÇÅ, x‚ÇÇ with right := 3}

example (x‚ÇÅ x‚ÇÇ : TwoNat) : (ord x‚ÇÅ x‚ÇÇ).fst = x‚ÇÅ.fst := sorry

example (x‚ÇÅ x‚ÇÇ : TwoNat) : (ord x‚ÇÅ x‚ÇÇ).fst = x‚ÇÇ.fst := sorry


-- An example with structures having three terms.
structure Mix' where
  snd : ‚Ñï
  left : ‚Ñï

structure ThreeNat where
  fst : ‚Ñï
  snd : ‚Ñï
  thrd : ‚Ñï

structure Mix‚ÇÉ where
  right : ‚Ñï
  left : ‚Ñï
  thrd : ‚Ñï

/- `x := {x.fst, x.right}`, `y := {y.snd, y.left}`, `z := {z.fst, z.snd, z.thrd}` and `Mix.mk` takes
a `fst : ‚Ñï` and a `right : ‚Ñï`: we need to throw away `x.left`, `y.left`, `z.snd` and `z.thrd`-/
example (x : Mix) (y : Mix') (z : ThreeNat) : Mix‚ÇÉ :=
  {x, y, z with}

-- A final example with a `Prop`-valued field:

#check Mess.mk

def f‚ÇÅ : Mess ‚Ñï ‚Ñï ‚Ñï where
  f := fun a b ‚Ü¶ a + b
  cont := {isOpen_preimage := fun _ _ ‚Ü¶ trivial}
  -- cont := ‚ü®fun _ _ ‚Ü¶ trivial‚ü©

def f‚ÇÇ : Mess ‚Ñï ‚Ñï ‚Ñï where
  f := fun a b ‚Ü¶ a + b
  cont := continuous_of_discreteTopology

-- `Prop`-valued fields disappear by proof irrelevance
example : f‚ÇÅ = f‚ÇÇ := rfl


-- `‚åò`


-- ## Extends


structure Blob extends OneNatOneInt, OneNat
-- structure Blob' extends OneNatOneInt, TwoNat -- partent field mismatch

structure TwoNatExt extends OneNat where
  snd : ‚Ñï

/- Under the hood, Lean destructs all these terms and reconstructs them "in the right order" ---
 but keeping labels. -/

-- Remember that `Couple` are pairs of left-right naturals.
def TwoExtToCouple : TwoNatExt ‚Üí Couple := by --fun x ‚Ü¶ {left := x.1, right := x.2} -- error! why?
  rintro ‚ü®x, y‚ü© -- by def, `TwoNatExt` extends `OneNat`, so `x : OneNat`. So,
  exact {left := x.1, right := y}

def TwoNatToCouple : TwoNat ‚Üí Couple := fun x ‚Ü¶ {left := x.1, right := x.2}

-- And if there are duplicates? Remember that
-- `structure Mix where`
--   `fst : ‚Ñï`
--   `right : ‚Ñï`

structure ThreeNatExt extends TwoNat, Mix

#print ThreeNatExt

/- Overlapping fields are not duplicated; moreover, whenever possible, fields will coincide with
constructors of the parent structure; in case of overlapping fields, things are destructured. -/
def TwoNatToExt : TwoNat ‚Üí TwoNatExt := fun x ‚Ü¶ {x with}

/- In the above definition, `with` is able to
1. Destruct `x` into `x.fst` and get a `OneNat`, that populates the first field of a `TwoNatExt`
2. Observe that the other field `x.snd` has the right type and label of what is missing. -/

example (x : TwoNat) : TwoNatToExt x = ‚ü®‚ü®x.fst‚ü©, x.snd‚ü© := rfl

/- Remember that `ThreeNatExt extends TwoNat, Mix` and
  `structure Mix where`
        `fst : ‚Ñï`
        `right : ‚Ñï`     -/

#check ThreeNatExt.mk

def M‚ÇÅ : Mix := {fst := 17, right := 11}
def two : TwoNat := {fst := 1, snd := 2}

def three : ThreeNatExt := {M‚ÇÅ, two with}
def three' : ThreeNatExt := {two, M‚ÇÅ with}

example : three.fst = 17 := by rfl
example : three'.fst = 1 := by rfl

/- So in reality Lean is first using the first variable (`M‚ÇÅ` or `two`), possibly throwing away
useless stuff, and then using what follows to complete them. -/

example : three = three' := sorry--rfl -- (they're even different, not simply not `defeq`..._
--  indeed, `three={fst = 17, snd = 2, right = 11}` while `three'={fst = 1, snd = 2, right = 11}`-/


def M‚ÇÇ : Mix := {fst := 13, right := 11}
def trois : ThreeNatExt := {two, M‚ÇÇ with}

example : trois.fst = 1 := rfl

example : three' = trois := rfl -- one uses `M‚ÇÅ`, and the other uses `M‚ÇÇ`.
/- both are `{fst = 1, snd = 2, right = 11}` (the field `left` has been discharged) . -/


-- `‚åò`


/- ### In True Math
We can now go back to what we saw the last weeks: remember that we defined -/

class AddMonoidBad (M : Type) extends Add M, AddZeroClass M

instance : AddMonoidBad ‚Ñï where --created using `:=` ‚Üí `_` ‚Üí üí°
  add := Nat.add
  zero := Nat.zero
  zero_add := Nat.zero_add
  add_zero := Nat.add_zero

instance : AddMonoidBad ‚Ñï := ‚ü®Nat.zero_add, Nat.add_zero‚ü©
-- instance : AddMonoidBad ‚Ñï := ‚ü®Nat.add_zero, Nat.zero_add‚ü© -- order matters!

instance : AddMonoidBad ‚Ñï := {Nat.instAddMonoid with}

instance : AddMonoidBad ‚Ñï where
  __ := Nat.instAddMonoid

end Structures

section AncillarySyntax

open scoped NNReal


-- `‚åò`


def F‚ÇÅ : ‚Ñù ‚Üí ‚Ñù‚â•0 := fun a ‚Ü¶ ‚Äñ a ‚Äñ‚Çä
def F‚ÇÇ : ‚Ñù ‚Üí ‚Ñù‚â•0 := (‚Äñ ¬∑ ‚Äñ‚Çä)

def G‚ÇÅ : ‚Ñï ‚Üí ‚Ñï := (¬∑ + 1)
def G‚ÇÇ : ‚Ñï ‚Üí ‚Ñï := fun x ‚Ü¶ x + 1
def G‚ÇÉ : ‚Ñï ‚Üí ‚Ñï := fun x ‚Ü¶ Nat.succ x

example : F‚ÇÅ = F‚ÇÇ := rfl
example : G‚ÇÅ = G‚ÇÇ := rfl
example : G‚ÇÇ = G‚ÇÉ := rfl

def L‚ÇÅ : Type _ ‚Üí Type _ := (List ¬∑) --
def L‚ÇÇ : Type* ‚Üí Type _ := (List ¬∑)
-- def L‚ÇÉ : Type* ‚Üí Type* := (List ¬∑) -- `application type mismatch`

/-The difference between `Type*` and `Type _` is that the first declares a term in every universe
level, the second requires Lean to infer it automatically. -/


-- `‚åò`


open Real Function

def myInjective (f : ‚Ñï ‚Üí ‚Ñï) : Prop :=
  ‚àÄ {a b : ‚Ñï}, f a = f b ‚Üí a = b

-- def Injective (f : Œ± ‚Üí Œ≤) : Prop :=
--   ‚àÄ ‚¶Éa‚ÇÅ a‚ÇÇ‚¶Ñ, f a‚ÇÅ = f a‚ÇÇ ‚Üí a‚ÇÅ = a‚ÇÇ


lemma myInjective.comp {f g : ‚Ñï ‚Üí ‚Ñï} (hf : myInjective f) (hg : myInjective g) :
    myInjective (f ‚àò g) := by
  intro a b H
  apply hg
  apply hf
  exact H

example (f g : ‚Ñï ‚Üí ‚Ñï) (hf : myInjective f) (hg : ‚àÄ (a b), g a = g b ‚Üí a = b) :
  myInjective (f ‚àò g) := by
  apply myInjective.comp
  exact hf
  -- exact hg -- `type mismatch`
  -- exact @hg
  sorry

/- As "explained" in the error message, `myInjective g` creates variables `a‚Ä† : ‚Ñï` and
`b‚Ä† : ‚Ñï` so that `myInjective g` *is* `g a‚Ä† = g b‚Ä† ‚Üí a‚Ä† = b‚Ä†`and the `‚àÄ` has vanished. -/

example (f g : ‚Ñï ‚Üí ‚Ñï) (hf : Injective f) (hg : ‚àÄ (a b), g a = g b ‚Üí a = b) :
  Injective (f ‚àò g) := by
  apply Injective.comp
  exact hf
  exact hg

example (a b : ‚Ñï) (f : ‚Ñï ‚Üí ‚Ñï) (h_myInj : myInjective f) (h_Inj : Injective f) (hab : f a = f b) :
  True := sorry
  -- have : h_myInj = h_Inj := rfl
  -- have : h_myInj = h_myInj := rfl
  -- have : h_Inj = h_Inj := rfl
  -- have : h_myInj hab = h_myInj hab := rfl
  -- have : h_myInj hab = h_Inj hab := rfl


-- `‚åò`


end AncillarySyntax


noncomputable section

section Exercises

section Ex1
-- ## Exercise 1
open scoped NNReal
--Recall from last lecture the two classes below, and the test-variable `p`:
class NormedModuleBad (M : Type*) [AddCommGroup M] where
  norm_b : M ‚Üí ‚Ñù‚â•0
export NormedModuleBad (norm_b)

notation "‚Äñ" e "‚Äñ‚ÇÄ" => norm_b e

instance (M N : Type*) [AddCommGroup M] [AddCommGroup N] [NormedModuleBad M] [NormedModuleBad N] :
    NormedModuleBad (M √ó N) where
  norm_b := fun ‚ü®m, n‚ü© ‚Ü¶ max ‚Äñm‚Äñ‚ÇÄ ‚Äñn‚Äñ‚ÇÄ

class ModuleWithRel (M : Type*) [AddCommGroup M] where
  rel : M ‚Üí M ‚Üí Prop

export ModuleWithRel (rel)

instance (M N : Type*) [AddCommGroup M] [AddCommGroup N] [ModuleWithRel M] [ModuleWithRel N] :
    ModuleWithRel (M √ó N) where
  rel := fun ‚ü®m1, n1‚ü© ‚ü®m2, n2‚ü© ‚Ü¶ (rel m1 m2) ‚àß (rel n1 n2)

variable (p : ‚àÄ {T : Type}, (T ‚Üí Prop) ‚Üí Prop)
/- When defining a `ModuleWithRel` instance on any `NormedModuleBad` we used the relation "being in the
same ball of radius `1`". Clearly the choice of `1` was arbitrary.

Define an infinite collection of instances of `ModuleWithRel` on any `NormedModuleBad` indexed by
`œÅ : ‚Ñù‚â•0`, and reproduce both the bad and the good example.

There are (at least) two ways:
* Enrich the `NormedModule`'s structure with a `œÅ`: this is straightforward.
* Keep `œÅ` as a variable: this is much harder, both because Lean won't be very happy with a
`class` depending on a variable and because there will *really* be different instances even with
good choices, so a kind of "internal rewriting" is needed. -/

class NMB_r (M : Type) extends AddCommGroup M, NormedModuleBad M where
  œÅ : ‚Ñù‚â•0

instance (M : Type) [NMB_r M] : ModuleWithRel M where
  rel := fun x y ‚Ü¶ ‚Äñx - y‚Äñ‚ÇÄ ‚â§ NMB_r.œÅ M

instance (M N : Type) [NMB_r M] [NMB_r N] : NMB_r (M √ó N) where
  œÅ := max (NMB_r.œÅ M) (NMB_r.œÅ N)

instance (M : Type) [NMB_r M] : ModuleWithRel M where
  rel := fun x y ‚Ü¶ ‚Äñ x - y ‚Äñ‚ÇÄ ‚â§ NMB_r.œÅ M

example (œÅ : ‚Ñù‚â•0) (hp : ‚àÄ M : Type, [NMB_r M] ‚Üí ‚àÄ m : M, p (rel m))
    (M : Type) [NMB_r M] (v : M √ó M) : p (rel v) := by
  specialize hp (M √ó M) v
  -- exact hp
  sorry

class NMG_r (M : Type) extends AddCommGroup M, NormedModuleBad M where
  œÅ : ‚Ñù‚â•0
  rel_œÅ := fun x y ‚Ü¶ norm_b (x - y) ‚â§ œÅ

instance (M : Type) [NMG_r M] : ModuleWithRel M where
  rel := NMG_r.rel_œÅ--fun x y ‚Ü¶ ‚Äñx - y‚Äñ‚ÇÅ ‚â§ NMG_r.œÅ M

instance (M N : Type) [NMG_r M] [NMG_r N] : NMG_r (M √ó N) where
  œÅ := max (NMG_r.œÅ M) (NMG_r.œÅ N)
  norm_b := fun ‚ü®m, n‚ü© ‚Ü¶ max ‚Äñm‚Äñ‚ÇÄ ‚Äñn‚Äñ‚ÇÄ
  rel_œÅ := rel

example /- (œÅ : ‚Ñù‚â•0) -/ (hp : ‚àÄ M : Type, [NMG_r M] ‚Üí ‚àÄ m : M, p (rel m))
    (M : Type) [NMG_r M] (v : M √ó M) : p (rel v) := by
  specialize hp (M √ó M) v
  exact hp

-- ### The hard approach

@[nolint unusedArguments]
def aliasR (M : Type*) (œÅ : ‚Ñù‚â•0) [AddCommGroup M] := M

class AsAliasR (M : Type*) (œÅ : ‚Ñù‚â•0) [AddCommGroup M] :=
  norm_R : M ‚Üí ‚Ñù‚â•0
  rel_R : M ‚Üí M ‚Üí Prop := fun x y ‚Ü¶ norm_R (x - y) ‚â§ œÅ
  equiv : M ‚âÉ aliasR M œÅ := Equiv.refl _

instance (M M' : Type*) (œÅ œÅ' : ‚Ñù‚â•0) [AddCommGroup M] [AddCommGroup M'] [AsAliasR M œÅ]
  [AsAliasR M' œÅ']: AsAliasR (M √ó M') (max œÅ œÅ') where
  norm_R := fun ‚ü®m‚ÇÅ, m‚ÇÅ'‚ü© ‚Ü¶ max (AsAliasR.norm_R œÅ m‚ÇÅ) (AsAliasR.norm_R œÅ' m‚ÇÅ')

instance (M : Type*) (œÅ : ‚Ñù‚â•0) [AddCommGroup M] : AddCommGroup (aliasR M œÅ) :=
  inferInstanceAs (AddCommGroup M)

-- The `ModuleWithRel` instance on every `aliasR`.
@[nolint unusedArguments]
instance (M : Type*) (œÅ : ‚Ñù‚â•0) [AddCommGroup M] [AsAliasR M œÅ] : ModuleWithRel (aliasR M œÅ) where
  rel := @AsAliasR.rel_R M œÅ _ _

variable (p : ‚àÄ {T : Type}, (T ‚Üí Prop) ‚Üí Prop)

example (hp : ‚àÄ M : Type, ‚àÄ œÅ : ‚Ñù‚â•0, [AddCommGroup M] ‚Üí [AsAliasR M œÅ] ‚Üí
    ‚àÄ m : aliasR M œÅ, p (rel m))
    (M : Type) (œÅ : ‚Ñù‚â•0) [AddCommGroup M] [AsAliasR M œÅ] (v : aliasR (M √ó M) œÅ) :
      p (rel (max_self œÅ ‚ñ∏ v)) := by
  specialize hp (M √ó M) (max œÅ œÅ) v
  convert hp
  simp only [eq_rec_constant]

end Ex1

section Ex2
-- ## Exercise 2
/- "Prove the following claims, stated in the section about the non-discrete metric on `‚Ñï`:
1. The uniformity is discrete if the metric is discrete.
2. As uniformities, `ùí´ (idRel) = ‚ä•`.
3. Is the equality `ùí´ (idRel) = ‚ä•` true as filters?
**ANSWER** NO
4. For any `Œ±`, the discrete topology is the bottom element `‚ä•` of the type `TopologicalSpace Œ±`.
**ANSWER** instance : CompleteLattice (TopologicalSpace Œ±) := (gciGenerateFrom Œ±).liftCompleteLattice"
-/
open Metric Filter Classical

example (X : Type*) [MetricSpace X] (hdisc : ‚àÄ x y : X, x ‚â† y ‚Üí dist x y = 1) :
    (uniformity X) = Filter.principal (idRel : Set (X √ó X)) := by
  convert Metric.uniformSpace_eq_bot.mpr ?_
  ¬∑ exact StrictMono.apply_eq_bot_iff fun _ _ a ‚Ü¶ a
  use 1
  simp only [zero_lt_one, true_and]
  intro i j h
  exact ge_of_eq <| hdisc i j h

example (X : Type*) : (‚ä• : UniformSpace X).uniformity = ùìü (idRel) := rfl

end Ex2

end Exercises
