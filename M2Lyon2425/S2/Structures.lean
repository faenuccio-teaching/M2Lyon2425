/-
  ## Structures
  Credits.
  * Mathematics in Lean, J. Avigad, P. Massot
-/
import Mathlib.Algebra.BigOperators.Ring
import Mathlib.Data.Real.Basic
import Mathlib.Topology.Instances.Real

class One‚ÇÅ (Œ± : Type) where
  /-- The element one -/
  one : Œ±

#check One‚ÇÅ.one -- One‚ÇÅ.one {Œ± : Type} [self : One‚ÇÅ Œ±] : Œ±

@[class] structure One‚ÇÇ (Œ± : Type) where
  /-- The element one -/
  one : Œ±

#check One‚ÇÇ.one


example (Œ± : Type) [One‚ÇÅ Œ±] : Œ± := One‚ÇÅ.one

example (Œ± : Type) [One‚ÇÅ Œ±] := (One‚ÇÅ.one : Œ±)

@[inherit_doc]
notation "ùüô" => One‚ÇÅ.one

example {Œ± : Type} [One‚ÇÅ Œ±] : Œ± := ùüô

example {Œ± : Type} [One‚ÇÅ Œ±] : (ùüô : Œ±) = ùüô := rfl


class Dia‚ÇÅ (Œ± : Type) where
  dia : Œ± ‚Üí Œ± ‚Üí Œ±

infixl:70 " ‚ãÑ "   => Dia‚ÇÅ.dia


class Semigroup‚ÇÅ (Œ± : Type) where
  toDia‚ÇÅ : Dia‚ÇÅ Œ±
  /-- Diamond is associative -/
  dia_assoc : ‚àÄ a b c : Œ±, a ‚ãÑ b ‚ãÑ c = a ‚ãÑ (b ‚ãÑ c)


attribute [instance] Semigroup‚ÇÅ.toDia‚ÇÅ

example {Œ± : Type} [Semigroup‚ÇÅ Œ±] (a b : Œ±) : Œ± := a ‚ãÑ b


class Semigroup‚ÇÇ (Œ± : Type) extends Dia‚ÇÅ Œ± where
  /-- Diamond is associative -/
  dia_assoc : ‚àÄ a b c : Œ±, a ‚ãÑ b ‚ãÑ c = a ‚ãÑ (b ‚ãÑ c)

example {Œ± : Type} [Semigroup‚ÇÇ Œ±] (a b : Œ±) : Œ± := a ‚ãÑ b

class DiaOneClass‚ÇÅ (Œ± : Type) extends One‚ÇÅ Œ±, Dia‚ÇÅ Œ± where
  /-- One is a left neutral element for diamond. -/
  one_dia : ‚àÄ a : Œ±, ùüô ‚ãÑ a = a
  /-- One is a right neutral element for diamond -/
  dia_one : ‚àÄ a : Œ±, a ‚ãÑ ùüô = a



set_option trace.Meta.synthInstance true in
example {Œ± : Type} [DiaOneClass‚ÇÅ Œ±] (a b : Œ±) : Prop := a ‚ãÑ b = ùüô


class Monoid‚ÇÅ (Œ± : Type) extends Semigroup‚ÇÅ Œ±, DiaOneClass‚ÇÅ Œ±


class Monoid‚ÇÇ (Œ± : Type) where
  toSemigroup‚ÇÅ : Semigroup‚ÇÅ Œ±
  toDiaOneClass‚ÇÅ : DiaOneClass‚ÇÅ Œ±


example {Œ± : Type} [Monoid‚ÇÅ Œ±] :
  (Monoid‚ÇÅ.toSemigroup‚ÇÅ.toDia‚ÇÅ.dia : Œ± ‚Üí Œ± ‚Üí Œ±) = Monoid‚ÇÅ.toDiaOneClass‚ÇÅ.toDia‚ÇÅ.dia := rfl


/- Monoid‚ÇÇ.mk {Œ± : Type} (toSemigroup‚ÇÅ : Semigroup‚ÇÅ Œ±) (toDiaOneClass‚ÇÅ : DiaOneClass‚ÇÅ Œ±) : Monoid‚ÇÇ Œ± -/
#check Monoid‚ÇÇ.mk

/- Monoid‚ÇÅ.mk {Œ± : Type} [toSemigroup‚ÇÅ : Semigroup‚ÇÅ Œ±] [toOne‚ÇÅ : One‚ÇÅ Œ±] (one_dia : ‚àÄ (a : Œ±), ùüô ‚ãÑ a = a) (dia_one : ‚àÄ (a : Œ±), a ‚ãÑ ùüô = a) : Monoid‚ÇÅ Œ± -/
#check Monoid‚ÇÅ.mk


#check Monoid‚ÇÅ.toSemigroup‚ÇÅ
#check Monoid‚ÇÅ.toDiaOneClass‚ÇÅ


class Inv‚ÇÅ (Œ± : Type) where
  /-- The inversion function -/
  inv : Œ± ‚Üí Œ±

@[inherit_doc]
postfix:max "‚Åª¬π" => Inv‚ÇÅ.inv

class Group‚ÇÅ (G : Type) extends Monoid‚ÇÅ G, Inv‚ÇÅ G where
  inv_dia : ‚àÄ a : G, a‚Åª¬π ‚ãÑ a = ùüô


lemma left_inv_eq_right_inv‚ÇÅ {M : Type} [Monoid‚ÇÅ M] {a b c : M} (hba : b ‚ãÑ a = ùüô) (hac : a ‚ãÑ c = ùüô) : b = c := by
  rw [‚Üê DiaOneClass‚ÇÅ.one_dia c, ‚Üê hba, Semigroup‚ÇÅ.dia_assoc, hac, DiaOneClass‚ÇÅ.dia_one b]


export DiaOneClass‚ÇÅ (one_dia dia_one)
export Semigroup‚ÇÅ (dia_assoc)
export Group‚ÇÅ (inv_dia)


example {M : Type} [Monoid‚ÇÅ M] {a b c : M} (hba : b ‚ãÑ a = ùüô) (hac : a ‚ãÑ c = ùüô) : b = c := by
  rw [‚Üê one_dia c, ‚Üê hba, dia_assoc, hac, dia_one b]


lemma inv_eq_of_dia {G : Type} [Group‚ÇÅ G] {a b : G} (h : a ‚ãÑ b = ùüô) : a‚Åª¬π = b :=
  sorry

lemma dia_inv {G : Type} [Group‚ÇÅ G] (a : G) : a ‚ãÑ a‚Åª¬π = ùüô :=
  sorry




class AddSemigroup‚ÇÉ (Œ± : Type) extends Add Œ± where
/-- Addition is associative -/
  add_assoc‚ÇÉ : ‚àÄ a b c : Œ±, a + b + c = a + (b + c)

@[to_additive AddSemigroup‚ÇÉ]
class Semigroup‚ÇÉ (Œ± : Type) extends Mul Œ± where
/-- Multiplication is associative -/
  mul_assoc‚ÇÉ : ‚àÄ a b c : Œ±, a * b * c = a * (b * c)

class AddMonoid‚ÇÉ (Œ± : Type) extends AddSemigroup‚ÇÉ Œ±, AddZeroClass Œ±

@[to_additive AddMonoid‚ÇÉ]
class Monoid‚ÇÉ (Œ± : Type) extends Semigroup‚ÇÉ Œ±, MulOneClass Œ±

attribute [to_additive existing] Monoid‚ÇÉ.toMulOneClass

export Semigroup‚ÇÉ (mul_assoc‚ÇÉ)
export AddSemigroup‚ÇÉ (add_assoc‚ÇÉ)

whatsnew in
@[to_additive]
lemma left_inv_eq_right_inv' {M : Type} [Monoid‚ÇÉ M] {a b c : M} (hba : b * a = 1) (hac : a * c = 1) : b = c := by
  rw [‚Üê one_mul c, ‚Üê hba, mul_assoc‚ÇÉ, hac, mul_one b]

#check left_neg_eq_right_neg'

class AddCommSemigroup‚ÇÉ (Œ± : Type) extends AddSemigroup‚ÇÉ Œ± where
  add_comm : ‚àÄ a b : Œ±, a + b = b + a

@[to_additive AddCommSemigroup‚ÇÉ]
class CommSemigroup‚ÇÉ (Œ± : Type) extends Semigroup‚ÇÉ Œ± where
  mul_comm : ‚àÄ a b : Œ±, a * b = b * a

class AddCommMonoid‚ÇÉ (Œ± : Type) extends AddMonoid‚ÇÉ Œ±, AddCommSemigroup‚ÇÉ Œ±

@[to_additive AddCommMonoid‚ÇÉ]
class CommMonoid‚ÇÉ (Œ± : Type) extends Monoid‚ÇÉ Œ±, CommSemigroup‚ÇÉ Œ±

class AddGroup‚ÇÉ (G : Type) extends AddMonoid‚ÇÉ G, Neg G where
  neg_add : ‚àÄ a : G, -a + a = 0

@[to_additive AddGroup‚ÇÉ]
class Group‚ÇÉ (G : Type) extends Monoid‚ÇÉ G, Inv G where
  inv_mul : ‚àÄ a : G, a‚Åª¬π * a = 1


attribute [simp] Group‚ÇÉ.inv_mul AddGroup‚ÇÉ.neg_add

@[to_additive]
lemma inv_eq_of_mul {G : Type} [Group‚ÇÉ G] {a b : G} (h : a * b = 1) : a‚Åª¬π = b :=
  sorry


@[to_additive (attr := simp)]
lemma Group‚ÇÉ.mul_inv {G : Type} [Group‚ÇÉ G] {a : G} : a * a‚Åª¬π = 1 := by
  sorry

@[to_additive]
lemma mul_left_cancel‚ÇÉ {G : Type} [Group‚ÇÉ G] {a b c : G} (h : a * b = a * c) : b = c := by
  sorry

@[to_additive]
lemma mul_right_cancel‚ÇÉ {G : Type} [Group‚ÇÉ G] {a b c : G} (h : b*a = c*a) : b = c := by
  sorry

class AddCommGroup‚ÇÉ (G : Type) extends AddGroup‚ÇÉ G, AddCommMonoid‚ÇÉ G

@[to_additive AddCommGroup‚ÇÉ]
class CommGroup‚ÇÉ (G : Type) extends Group‚ÇÉ G, CommMonoid‚ÇÉ G



class Ring‚ÇÉ (R : Type) extends AddGroup‚ÇÉ R, Monoid‚ÇÉ R, MulZeroClass R where
  /-- Multiplication is left distributive over addition -/
  left_distrib : ‚àÄ a b c : R, a * (b + c) = a * b + a * c
  /-- Multiplication is right distributive over addition -/
  right_distrib : ‚àÄ a b c : R, (a + b) * c = a * c + b * c

instance {R : Type} [Ring‚ÇÉ R] : AddCommGroup‚ÇÉ R :=
{ Ring‚ÇÉ.toAddGroup‚ÇÉ with
  add_comm := by
    sorry }

instance : Ring‚ÇÉ ‚Ñ§ where
  add := (¬∑ + ¬∑)
  add_assoc‚ÇÉ := add_assoc
  zero := 0
  zero_add := by simp
  add_zero := by simp
  neg := (- ¬∑)
  neg_add := by simp
  mul := (¬∑ * ¬∑)
  mul_assoc‚ÇÉ := mul_assoc
  one := 1
  one_mul := by simp
  mul_one := by simp
  zero_mul := by simp
  mul_zero := by simp
  left_distrib := Int.mul_add
  right_distrib := Int.add_mul

class LE‚ÇÅ (Œ± : Type) where
  /-- The Less-or-Equal relation. -/
  le : Œ± ‚Üí Œ± ‚Üí Prop

@[inherit_doc] infix:50 " ‚â§‚ÇÅ " => LE‚ÇÅ.le

class Preorder‚ÇÅ (Œ± : Type)

class PartialOrder‚ÇÅ (Œ± : Type)

class OrderedCommMonoid‚ÇÅ (Œ± : Type)

instance : OrderedCommMonoid‚ÇÅ ‚Ñï where

class SMul‚ÇÉ (Œ± : Type) (Œ≤ : Type) where
  /-- Scalar multiplication -/
  smul : Œ± ‚Üí Œ≤ ‚Üí Œ≤

infixr:73 " ‚Ä¢ " => SMul‚ÇÉ.smul


class Module‚ÇÅ (R : Type) [Ring‚ÇÉ R] (M : Type) [AddCommGroup‚ÇÉ M] extends SMul‚ÇÉ R M where
  zero_smul : ‚àÄ m : M, (0 : R) ‚Ä¢ m = 0
  one_smul : ‚àÄ m : M, (1 : R) ‚Ä¢ m = m
  mul_smul : ‚àÄ (a b : R) (m : M), (a * b) ‚Ä¢ m = a ‚Ä¢ b ‚Ä¢ m
  add_smul : ‚àÄ (a b : R) (m : M), (a + b) ‚Ä¢ m = a ‚Ä¢ m + b ‚Ä¢ m
  smul_add : ‚àÄ (a : R) (m n : M), a ‚Ä¢ (m + n) = a ‚Ä¢ m + a ‚Ä¢ n

instance selfModule (R : Type) [Ring‚ÇÉ R] : Module‚ÇÅ R R where
  smul := fun r s ‚Ü¶ r*s
  zero_smul := zero_mul
  one_smul := one_mul
  mul_smul := mul_assoc‚ÇÉ
  add_smul := Ring‚ÇÉ.right_distrib
  smul_add := Ring‚ÇÉ.left_distrib

def nsmul‚ÇÅ {M : Type*} [Zero M] [Add M] : ‚Ñï ‚Üí M ‚Üí M
  | 0, _ => 0
  | n + 1, a => a + nsmul‚ÇÅ n a

def zsmul‚ÇÅ {M : Type*} [Zero M] [Add M] [Neg M] : ‚Ñ§ ‚Üí M ‚Üí M
  | Int.ofNat n, a => nsmul‚ÇÅ n a
  | Int.negSucc n, a => -nsmul‚ÇÅ n.succ a

instance abGrpModule (A : Type) [AddCommGroup‚ÇÉ A] : Module‚ÇÅ ‚Ñ§ A where
  smul := zsmul‚ÇÅ
  zero_smul := sorry
  one_smul := sorry
  mul_smul := sorry
  add_smul := sorry
  smul_add := sorry

#synth Module‚ÇÅ ‚Ñ§ ‚Ñ§ -- abGrpModule ‚Ñ§


class AddMonoid‚ÇÑ (M : Type) extends AddSemigroup‚ÇÉ M, AddZeroClass M where
  /-- Multiplication by a natural number. -/
  nsmul : ‚Ñï ‚Üí M ‚Üí M := nsmul‚ÇÅ
  /-- Multiplication by `(0 : ‚Ñï)` gives `0`. -/
  nsmul_zero : ‚àÄ x, nsmul 0 x = 0 := by intros; rfl
  /-- Multiplication by `(n + 1 : ‚Ñï)` behaves as expected. -/
  nsmul_succ : ‚àÄ (n : ‚Ñï) (x), nsmul (n + 1) x = x + nsmul n x := by intros; rfl

instance mySMul {M : Type} [AddMonoid‚ÇÑ M] : SMul ‚Ñï M := ‚ü®AddMonoid‚ÇÑ.nsmul‚ü©

instance (M N : Type) [AddMonoid‚ÇÑ M] [AddMonoid‚ÇÑ N] : AddMonoid‚ÇÑ (M √ó N) where
  add := fun p q ‚Ü¶ (p.1 + q.1, p.2 + q.2)
  add_assoc‚ÇÉ := fun a b c ‚Ü¶ by ext <;> apply add_assoc‚ÇÉ
  zero := (0, 0)
  zero_add := fun a ‚Ü¶ by ext <;> apply zero_add
  add_zero := fun a ‚Ü¶ by ext <;> apply add_zero

instance : AddMonoid‚ÇÑ ‚Ñ§ where
  add := (¬∑ + ¬∑)
  add_assoc‚ÇÉ := Int.add_assoc
  zero := 0
  zero_add := Int.zero_add
  add_zero := Int.add_zero
  nsmul := fun n m ‚Ü¶ (n : ‚Ñ§) * m
  nsmul_zero := Int.zero_mul
  nsmul_succ := fun n m ‚Ü¶ show (n + 1 : ‚Ñ§) * m = m + n * m
    by rw [Int.add_mul, Int.add_comm, Int.one_mul]

example (n : ‚Ñï) (m : ‚Ñ§) : SMul.smul (self := mySMul) n m = n * m := rfl

def isMonoidHom‚ÇÅ {G H : Type} [Monoid G] [Monoid H] (f : G ‚Üí H) : Prop :=
  f 1 = 1 ‚àß ‚àÄ g g', f (g * g') = f g * f g'

structure isMonoidHom‚ÇÇ {G H : Type} [Monoid G] [Monoid H] (f : G ‚Üí H) : Prop where
  map_one : f 1 = 1
  map_mul : ‚àÄ g g', f (g * g') = f g * f g'

example : Continuous (id : ‚Ñù ‚Üí ‚Ñù) := continuous_id

@[ext]
structure MonoidHom‚ÇÅ (G H : Type) [Monoid G] [Monoid H]  where
  toFun : G ‚Üí H
  map_one : toFun 1 = 1
  map_mul : ‚àÄ g g', toFun (g * g') = toFun g * toFun g'

instance {G H : Type} [Monoid G] [Monoid H] : CoeFun (MonoidHom‚ÇÅ G H) (fun _ ‚Ü¶ G ‚Üí H) where
  coe := MonoidHom‚ÇÅ.toFun

attribute [coe] MonoidHom‚ÇÅ.toFun


example {G H : Type} [Monoid G] [Monoid H] (f : MonoidHom‚ÇÅ G H) : f 1 = 1 :=  f.map_one

@[ext]
structure AddMonoidHom‚ÇÅ (G H : Type) [AddMonoid G] [AddMonoid H]  where
  toFun : G ‚Üí H
  map_zero : toFun 0 = 0
  map_add : ‚àÄ g g', toFun (g + g') = toFun g + toFun g'

instance {G H : Type} [AddMonoid G] [AddMonoid H] :
    CoeFun (AddMonoidHom‚ÇÅ G H) (fun _ ‚Ü¶ G ‚Üí H) where
  coe := AddMonoidHom‚ÇÅ.toFun

attribute [coe] AddMonoidHom‚ÇÅ.toFun

@[ext]
structure RingHom‚ÇÅ (R S : Type) [Ring R] [Ring S] extends MonoidHom‚ÇÅ R S, AddMonoidHom‚ÇÅ R S

class MonoidHomClass‚ÇÅ (F : Type) (M N : Type) [Monoid M] [Monoid N] where
  toFun : F ‚Üí M ‚Üí N
  map_one : ‚àÄ f : F, toFun f 1 = 1
  map_mul : ‚àÄ f g g', toFun f (g * g') = toFun f g * toFun f g'


def badInst {M N F : Type} [Monoid M] [Monoid N] [MonoidHomClass‚ÇÅ F M N] :
    CoeFun F (fun _ ‚Ü¶ M ‚Üí N) where
  coe := MonoidHomClass‚ÇÅ.toFun

class MonoidHomClass‚ÇÇ (F : Type) (M N : outParam Type) [Monoid M] [Monoid N] where
  toFun : F ‚Üí M ‚Üí N
  map_one : ‚àÄ f : F, toFun f 1 = 1
  map_mul : ‚àÄ f g g', toFun f (g * g') = toFun f g * toFun f g'

instance {M N F : Type} [Monoid M] [Monoid N] [MonoidHomClass‚ÇÇ F M N] :
    CoeFun F (fun _ ‚Ü¶ M ‚Üí N) where
  coe := MonoidHomClass‚ÇÇ.toFun

attribute [coe] MonoidHomClass‚ÇÇ.toFun

instance (M N : Type) [Monoid M] [Monoid N] : MonoidHomClass‚ÇÇ (MonoidHom‚ÇÅ M N) M N where
  toFun := MonoidHom‚ÇÅ.toFun
  map_one := fun f ‚Ü¶ f.map_one
  map_mul := fun f ‚Ü¶ f.map_mul

instance (R S : Type) [Ring R] [Ring S] : MonoidHomClass‚ÇÇ (RingHom‚ÇÅ R S) R S where
  toFun := fun f ‚Ü¶ f.toMonoidHom‚ÇÅ.toFun
  map_one := fun f ‚Ü¶ f.toMonoidHom‚ÇÅ.map_one
  map_mul := fun f ‚Ü¶ f.toMonoidHom‚ÇÅ.map_mul

lemma map_inv_of_inv {M N F : Type} [Monoid M] [Monoid N] [MonoidHomClass‚ÇÇ F M N]
    (f : F) {m m' : M} (h : m*m' = 1) :
    f m * f m' = 1 := by
  rw [‚Üê MonoidHomClass‚ÇÇ.map_mul, h, MonoidHomClass‚ÇÇ.map_one]

example {M N : Type} [Monoid M] [Monoid N] (f : MonoidHom‚ÇÅ M N) {m m' : M} (h : m*m' = 1) :
    f m * f m' = 1 :=
  map_inv_of_inv f h

example {R S : Type} [Ring R] [Ring S] (f : RingHom‚ÇÅ R S) {r r' : R} (h : r*r' = 1) :
    f r * f r' = 1 :=
  map_inv_of_inv f h



class MonoidHomClass‚ÇÉ (F : Type) (M N : outParam Type) [Monoid M] [Monoid N] extends
    DFunLike F M (fun _ ‚Ü¶ N) where
  map_one : ‚àÄ f : F, f 1 = 1
  map_mul : ‚àÄ (f : F) g g', f (g * g') = f g * f g'

instance (M N : Type) [Monoid M] [Monoid N] : MonoidHomClass‚ÇÉ (MonoidHom‚ÇÅ M N) M N where
  coe := MonoidHom‚ÇÅ.toFun
  coe_injective' _ _ := MonoidHom‚ÇÅ.ext
  map_one := MonoidHom‚ÇÅ.map_one
  map_mul := MonoidHom‚ÇÅ.map_mul


@[ext]
structure OrderPresHom (Œ± Œ≤ : Type) [LE Œ±] [LE Œ≤] where
  toFun : Œ± ‚Üí Œ≤
  le_of_le : ‚àÄ a a', a ‚â§ a' ‚Üí toFun a ‚â§ toFun a'

@[ext]
structure OrderPresMonoidHom (M N : Type) [Monoid M] [LE M] [Monoid N] [LE N] extends
MonoidHom‚ÇÅ M N, OrderPresHom M N

class OrderPresHomClass (F : Type) (Œ± Œ≤ : outParam Type) [LE Œ±] [LE Œ≤]

instance (Œ± Œ≤ : Type) [LE Œ±] [LE Œ≤] : OrderPresHomClass (OrderPresHom Œ± Œ≤) Œ± Œ≤ where

instance (Œ± Œ≤ : Type) [LE Œ±] [Monoid Œ±] [LE Œ≤] [Monoid Œ≤] :
    OrderPresHomClass (OrderPresMonoidHom Œ± Œ≤) Œ± Œ≤ where

instance (Œ± Œ≤ : Type) [LE Œ±] [Monoid Œ±] [LE Œ≤] [Monoid Œ≤] :
    MonoidHomClass‚ÇÉ (OrderPresMonoidHom Œ± Œ≤) Œ± Œ≤
  := sorry
