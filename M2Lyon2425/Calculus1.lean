/-
  ## Calculus 1
  Credits.
  * Formalising Mathematics 2022 - 2024, K. Buzzard
  * Mathematics in Lean, J. Avigad, P. Massot
-/
import Mathlib.Analysis.PSeries
import Mathlib.Analysis.SpecificLimits.Basic
import Mathlib.Analysis.Calculus.LHopital
import Mathlib.Analysis.SpecialFunctions.Trigonometric.Series
import Mathlib.Analysis.SpecialFunctions.Trigonometric.Deriv

open Set Filter

open Topology Filter Classical Real

noncomputable section

open Real Set

/-
  # Derivatives
-/

/-- The sin function has derivative 1 at 0. -/
example : HasDerivAt sin 1 0 := by simpa using hasDerivAt_sin 0

example (x : ‚Ñù) : DifferentiableAt ‚Ñù sin x := by
  sorry

example {f : ‚Ñù ‚Üí ‚Ñù} {x a : ‚Ñù} (h : HasDerivAt f a x) : deriv f x = a := by
  sorry

example {a : ‚Ñù} : deriv sin a = cos a := by
  sorry

example {f : ‚Ñù ‚Üí ‚Ñù} {x : ‚Ñù} (h : ¬¨DifferentiableAt ‚Ñù f x) : deriv f x = 0 := by
  sorry

example {f g : ‚Ñù ‚Üí ‚Ñù} {x : ‚Ñù} (hf : DifferentiableAt ‚Ñù f x) (hg : DifferentiableAt ‚Ñù g x) :
    deriv (f + g) x = deriv f x + deriv g x := by
  sorry

example {f : ‚Ñù ‚Üí ‚Ñù} {a : ‚Ñù} (h : IsLocalMin f a) : deriv f a = 0 := by
  sorry

example {f : ‚Ñù ‚Üí ‚Ñù} {a b : ‚Ñù} (hab : a < b) (hfc : ContinuousOn f (Icc a b)) (hfI : f a = f b) :
    ‚àÉ c ‚àà Ioo a b, deriv f c = 0 := by
  sorry

example (f : ‚Ñù ‚Üí ‚Ñù) {a b : ‚Ñù} (hab : a < b) (hf : ContinuousOn f (Icc a b))
    (hf' : DifferentiableOn ‚Ñù f (Ioo a b)) : ‚àÉ c ‚àà Ioo a b, deriv f c = (f b - f a) / (b - a) :=
  sorry

example : deriv (fun x : ‚Ñù ‚Ü¶ x ^ 5 + 1) 6 = 5 * 6 ^ 4 := by
  sorry

example : deriv sin œÄ = -1 := by
  sorry

-- Try proving it by hand.
example : Differentiable ‚Ñù fun x => cos (sin x) * exp x := by sorry

-- Now see what `hint` has to say!
example : Differentiable ‚Ñù fun x => cos (sin x) * exp x := by
  sorry

-- `Function.comp_def` might be useful here
example (x : ‚Ñù) :
    deriv (fun x => cos (sin x) * exp x) x = (cos (sin x) - sin (sin x) * cos x) * exp x := by
  sorry

end

/-
  # Limits computation
-/

-- Some classical limits
example : Tendsto (fun n : ‚Ñï ‚Ü¶ 1 / (n : ‚Ñù)) atTop (ùìù 0) := by
  sorry

example : Tendsto (fun n : ‚Ñï ‚Ü¶ n) atTop atTop := by
  sorry

example : Tendsto (fun  n : ‚Ñï ‚Ü¶ (n + 1 : ‚Ñù) / n) atTop (ùìù 1) := by
  sorry

example : Tendsto (fun n : ‚Ñï ‚Ü¶ n ^ 2) atTop atTop := by
  sorry

example : Tendsto (fun n : ‚Ñï ‚Ü¶ n ^ 2 + n) atTop atTop := by
  sorry

-- Squeeze theorem
#check tendsto_of_tendsto_of_tendsto_of_le_of_le

#check tendsto_of_tendsto_of_tendsto_of_le_of_le'

example : Tendsto (fun n : ‚Ñï ‚Ü¶ (n : ‚Ñù) ^ 2 + 4 * Real.sqrt n) atTop atTop := by
  sorry

example (f : ‚Ñù ‚Üí ‚Ñù) (g : ‚Ñù ‚Üí ‚Ñù) (a l : ‚Ñù) (hf : Tendsto f (ùìù a) (ùìù l)) (h : f = g) :
    Tendsto g (ùìù a) (ùìù l) := by
  sorry

-- Congruence for limits
example (f : ‚Ñù ‚Üí ‚Ñù) (g : ‚Ñù ‚Üí ‚Ñù) (a l : ‚Ñù) (hf : Tendsto f (ùìù a) (ùìù l)) (h : f =·∂†[ùìù a] g) :
    Tendsto g (ùìù a) (ùìù l) := by
  sorry

-- Unicity of limits
example (f : ‚Ñù ‚Üí ‚Ñù) (a l l' : ‚Ñù) (hf : Tendsto f (ùìù a) (ùìù l))  (hf : Tendsto f (ùìù a) (ùìù l')) :
    l = l' := by
  sorry

-- L'H√¥pital's rule
example : Tendsto (fun x ‚Ü¶ (exp x - 1) / (sin x)) (ùìù[‚â†] 0) (ùìù 1) := by
  refine deriv.lhopital_zero_nhds ?_ ?_ ?_ ?_ ?_
  all_goals sorry

/-
  # Normed vector space
-/

section

variable {E : Type*} [NormedAddCommGroup E]

example (x : E) : 0 ‚â§ ‚Äñx‚Äñ := norm_nonneg x

example {x : E} : ‚Äñx‚Äñ = 0 ‚Üî x = 0 := norm_eq_zero

example (x y : E) : ‚Äñx + y‚Äñ ‚â§ ‚Äñx‚Äñ + ‚Äñy‚Äñ := norm_add_le x y

example : MetricSpace E := by infer_instance

example {X : Type*} [TopologicalSpace X] {f : X ‚Üí E} (hf : Continuous f) :
    Continuous fun x ‚Ü¶ ‚Äñf x‚Äñ := by
  sorry

variable [NormedSpace ‚Ñù E]

example (a : ‚Ñù) (x : E) : ‚Äña ‚Ä¢ x‚Äñ = |a| * ‚Äñx‚Äñ := norm_smul a x

example [FiniteDimensional ‚Ñù E] : CompleteSpace E := by infer_instance

example (ùïú : Type*) [NontriviallyNormedField ùïú] (E : Type*) [NormedAddCommGroup E]
    [NormedSpace ùïú E] [CompleteSpace ùïú] [FiniteDimensional ùïú E] : CompleteSpace E :=
  FiniteDimensional.complete ùïú E

end

section

variable {ùïú : Type*} [NontriviallyNormedField ùïú] {E : Type*} [NormedAddCommGroup E]
  [NormedSpace ùïú E] {F : Type*} [NormedAddCommGroup F] [NormedSpace ùïú F]

example : E ‚ÜíL[ùïú] E :=
  ContinuousLinearMap.id ùïú E

example (f : E ‚ÜíL[ùïú] F) : E ‚Üí F := f

example (f : E ‚ÜíL[ùïú] F) : Continuous f := f.cont

example (f : E ‚ÜíL[ùïú] F) (x y : E) : f (x + y) = f x + f y := f.map_add x y

example (f : E ‚ÜíL[ùïú] F) (a : ùïú) (x : E) : f (a ‚Ä¢ x) = a ‚Ä¢ f x := f.map_smul a x

variable (f : E ‚ÜíL[ùïú] F)

example (x : E) : ‚Äñf x‚Äñ ‚â§ ‚Äñf‚Äñ * ‚Äñx‚Äñ := f.le_opNorm x

example {M : ‚Ñù} (hMp : 0 ‚â§ M) (hM : ‚àÄ x, ‚Äñf x‚Äñ ‚â§ M * ‚Äñx‚Äñ) : ‚Äñf‚Äñ ‚â§ M :=
  f.opNorm_le_bound hMp hM

end

section

variable {ùïú : Type*} [NontriviallyNormedField ùïú] {E : Type*} [NormedAddCommGroup E]
  [NormedSpace ùïú E] {F : Type*} [NormedAddCommGroup F] [NormedSpace ùïú F]

open Metric

example {Œπ : Type*} [CompleteSpace E] {g : Œπ ‚Üí E ‚ÜíL[ùïú] F} (h : ‚àÄ x, ‚àÉ C, ‚àÄ i, ‚Äñg i x‚Äñ ‚â§ C) :
    ‚àÉ C', ‚àÄ i, ‚Äñg i‚Äñ ‚â§ C' := by
  -- sequence of subsets consisting of those `x : E` with norms `‚Äñg i x‚Äñ` bounded by `n`
  let e : ‚Ñï ‚Üí Set E := fun n ‚Ü¶ ‚ãÇ i : Œπ, { x : E | ‚Äñg i x‚Äñ ‚â§ n }
  -- each of these sets is closed
  have hc : ‚àÄ n : ‚Ñï, IsClosed (e n) := by
    sorry
  -- the union is the entire space; this is where we use `h`
  have hU : (‚ãÉ n : ‚Ñï, e n) = univ := by
    sorry
  /- apply the Baire category theorem to conclude that for some `m : ‚Ñï`,
       `e m` contains some `x` -/
  obtain ‚ü®m, x, hx‚ü© : ‚àÉ m, ‚àÉ x, x ‚àà interior (e m) := sorry
  obtain ‚ü®Œµ, Œµ_pos, hŒµ‚ü© : ‚àÉ Œµ > 0, ball x Œµ ‚äÜ interior (e m) := sorry
  obtain ‚ü®k, hk‚ü© : ‚àÉ k : ùïú, 1 < ‚Äñk‚Äñ := sorry
  -- show all elements in the ball have norm bounded by `m` after applying any `g i`
  have real_norm_le : ‚àÄ z ‚àà ball x Œµ, ‚àÄ (i : Œπ), ‚Äñg i z‚Äñ ‚â§ m := by
    sorry
  have Œµk_pos : 0 < Œµ / ‚Äñk‚Äñ := sorry
  refine ‚ü®(m + m : ‚Ñï) / (Œµ / ‚Äñk‚Äñ), fun i ‚Ü¶ ContinuousLinearMap.opNorm_le_of_shell Œµ_pos ?_ hk ?_‚ü©
  sorry
  sorry

end

/-
  # Asymptotics
-/

section Asymptotics

open Asymptotics

example {Œ± : Type*} {E : Type*} [NormedGroup E] {F : Type*} [NormedGroup F] (c : ‚Ñù)
    (l : Filter Œ±) (f : Œ± ‚Üí E) (g : Œ± ‚Üí F) : IsBigOWith c l f g ‚Üî ‚àÄ·∂† x in l, ‚Äñf x‚Äñ ‚â§ c * ‚Äñg x‚Äñ :=
  isBigOWith_iff

example {Œ± : Type*} {E : Type*} [NormedGroup E] {F : Type*} [NormedGroup F]
    (l : Filter Œ±) (f : Œ± ‚Üí E) (g : Œ± ‚Üí F) : f =O[l] g ‚Üî ‚àÉ C, IsBigOWith C l f g :=
  isBigO_iff_isBigOWith

example {Œ± : Type*} {E : Type*} [NormedGroup E] {F : Type*} [NormedGroup F]
    (l : Filter Œ±) (f : Œ± ‚Üí E) (g : Œ± ‚Üí F) : f =o[l] g ‚Üî ‚àÄ C > 0, IsBigOWith C l f g :=
  isLittleO_iff_forall_isBigOWith

example {Œ± : Type*} {E : Type*} [NormedAddCommGroup E] (l : Filter Œ±) (f g : Œ± ‚Üí E) :
    f ~[l] g ‚Üî (f - g) =o[l] g :=
  Iff.rfl

#check Filter.eventually_ne_atTop

#check Filter.eventually_gt_atTop

#check lt_sub_iff_add_lt'

#check lt_div_iff

lemma result1 (a : ‚Ñï ‚Üí ‚Ñù) (h1 : ‚àÄ n, 0 ‚â§ a n) (h2 : a ~[atTop] fun n ‚Ü¶ n) (Œµ : ‚Ñù) (hŒµ : 0 < Œµ) :
    ‚àÄ·∂† n in atTop, (1 - Œµ) * n < a n ‚àß a n < (1 + Œµ) * n := by
  rw [Asymptotics.isEquivalent_iff_tendsto_one] at h2
  ¬∑ rw [Metric.tendsto_nhds] at h2
    simp_rw [dist_eq_norm, Real.norm_eq_abs] at h2
    specialize h2 Œµ hŒµ
    filter_upwards [h2] with n hn
    rw [abs_lt] at hn
    constructor
    ¬∑ replace hn := hn.1
      dsimp at hn
      sorry
    ¬∑ sorry
  ¬∑ sorry

end Asymptotics

/-
  # Unconditionally convergent series
-/

section Series

open Asymptotics

example (x : ‚Ñù) :
    cos x = ‚àë' (n : ‚Ñï), (-1 : ‚Ñù) ^ n * x ^ (2 * n) /(2 * n).factorial := by
  sorry

example {Œ± Œ≤ : Type*} [AddCommGroup Œ≤] [TopologicalSpace Œ≤] (f : Œ± ‚Üí Œ≤) (hf : ¬¨ Summable f) :
    ‚àë' x, f x = 0 := tsum_eq_zero_of_not_summable hf

example {Œ± Œ≤ : Type*} [AddCommGroup Œ≤] [TopologicalSpace Œ≤] [T2Space Œ≤] (f : Œ± ‚Üí Œ≤) (b : Œ≤)
    (hr : HasSum f b) :
    ‚àë' x, f x = b := by
  sorry

example {Œ± Œ≤ : Type*} [AddCommGroup Œ≤] [TopologicalSpace Œ≤] (f : Œ± ‚Üí Œ≤) (hf : Summable f) :
    HasSum f (‚àë' x, f x) := by
  sorry

example {Œ± Œ≤ : Type*} [AddCommGroup Œ≤] [TopologicalSpace Œ≤] (f : Œ± ‚Üí Œ≤) (b : Œ≤) :
    HasSum f b ‚Üî Filter.Tendsto (fun (s : Finset Œ±) => ‚àë x ‚àà s, f x) Filter.atTop (nhds b) := Iff.rfl

example (z : ‚ÑÇ) :
    HasSum (fun n ‚Ü¶ (-1 : ‚ÑÇ) ^ n * z ^ (2 * n) /(2 * n).factorial) (Complex.cos z) :=
  Complex.hasSum_cos z

-- Assume the following results (it exists in your version of Mathlib but on another form)
theorem zeta_residue :
    Tendsto (fun (s : ‚Ñù) => (s - 1) * ‚àë' (n : ‚Ñï), (n : ‚Ñù) ^ (- s)) (ùìù[>] 1) (ùìù 1) := sorry

#check summable_of_isBigO_nat'

variable (a : ‚Ñï ‚Üí ‚Ñù) (h1 : ‚àÄ n, 0 ‚â§ a n) (h2 : a ~[atTop] fun n ‚Ü¶ n)

-- We want to prove that `Tendsto (fun (s : ‚Ñù) => (s - 1) * ‚àë' (n : ‚Ñï), a n ^ (- s)) (ùìù[>] 1) (ùìù 1)`

#check summable_of_isBigO_nat'

include h1 h2 in
lemma result2 {s : ‚Ñù} (hs : 1 < s) : Summable (fun n ‚Ü¶ a n ^ (- s)) := by
  have h_sum : Summable (fun n : ‚Ñï ‚Ü¶ (n : ‚Ñù) ^ (- s)) := by
    rw [summable_nat_rpow]
    sorry
  refine summable_of_isBigO_nat' h_sum ?_
  have h_bdd := result1 a h1 h2 1 zero_lt_one
  rw [Asymptotics.isBigO_iff]
  use 1 + 1
  sorry

#check tendsto_finset_sum

#check Real.continuousAt_const_rpow'

#check Tendsto.congr'

lemma result3 (v : ‚Ñï ‚Üí ‚Ñù) (hv : ‚àÄ n, 0 ‚â§ v n) (T : Finset ‚Ñï) :
    Tendsto (fun s : ‚Ñù ‚Ü¶ (s - 1) * ‚àë n ‚àà T, v n ^ (- s)) (ùìù[>] 1) (ùìù 0) := by
  have h_single : ‚àÄ n, Tendsto (fun s : ‚Ñù ‚Ü¶ (s - 1) * v n ^ (- s)) (ùìù[>] 1) (ùìù 0) := by
    intro n
    have lim1 : Tendsto (fun s : ‚Ñù ‚Ü¶ (s - 1)) (ùìù 1) (ùìù 0) := by
      have h_sub_cont := continuous_sub_right (1 : ‚Ñù)
      have := h_sub_cont.tendsto 1
      sorry
    have lim2 : Tendsto (fun s : ‚Ñù ‚Ü¶ v n ^ (- s)) (ùìù 1) (ùìù ((v n) ‚Åª¬π)) := by
      by_cases h : v n = 0
      ¬∑ simp_rw [h, inv_zero]
        refine tendsto_const_nhds.congr' ?_
        filter_upwards [eventually_ne_nhds one_ne_zero] with s hs
        rw [Real.zero_rpow]
        rwa [neg_ne_zero]
      ¬∑ simp_rw [Real.rpow_neg (hv _)]
        refine Filter.Tendsto.inv‚ÇÄ ?_ h
        sorry
    convert tendsto_nhdsWithin_of_tendsto_nhds (Tendsto.mul lim1 lim2)
    sorry
  convert tendsto_finset_sum T (fun n _ ‚Ü¶ h_single n)
  ¬∑ sorry
  ¬∑ sorry

#check sum_add_tsum_compl

#check eventually_mem_nhdsWithin

lemma result4 (T : Finset ‚Ñï) :
    Tendsto (fun s : ‚Ñù ‚Ü¶ (s - 1) * ‚àë' n : ‚Üë((T : Set ‚Ñï)·∂ú), (n : ‚Ñù) ^ (- s)) (ùìù[>] 1) (ùìù 1) := by
  have h_sum : (fun s ‚Ü¶ (s - 1) * ‚àë' n : ‚Ñï, (n : ‚Ñù) ^ (- s) - (s - 1) * ‚àë n ‚àà T, (n : ‚Ñù) ^ (- s))
      =·∂†[ùìù[>] 1] (fun s : ‚Ñù ‚Ü¶ (s - 1) * ‚àë' n : ‚Üë((T : Set ‚Ñï)·∂ú), (n : ‚Ñù) ^ (- s)) := by
    filter_upwards with s
    rw [sub_eq_iff_eq_add', ‚Üê mul_add, sum_add_tsum_compl]
    sorry -- You might have to change some lines above too
  refine Tendsto.congr' h_sum ?_
  have lim1 := zeta_residue
  have lim2 := result3 (fun n ‚Ü¶ n) (fun n ‚Ü¶ Nat.cast_nonneg n) T
  convert Tendsto.sub lim1 lim2
  rw [sub_zero]

lemma result1' (a : ‚Ñï ‚Üí ‚Ñù) (h1 : ‚àÄ n, 0 ‚â§ a n) (h2 : a ~[atTop] fun n ‚Ü¶ n) (Œµ : ‚Ñù) (hŒµ : 0 < Œµ) :
    ‚àÄ·∂† n : ‚Ñï in atTop, (1 - Œµ) * (n : ‚Ñù)‚Åª¬π < (a n)‚Åª¬π ‚àß (a n)‚Åª¬π < (1 + Œµ) * (n : ‚Ñù)‚Åª¬π := by
  sorry

#check tsum_strict_mono

#check Pi.lt_def

#check Real.rpow_neg

#check Real.inv_rpow

#check Real.rpow_le_rpow

include h1 h2 in
lemma result5 {Œµ : ‚Ñù} (hŒµ : 0 < Œµ) (hŒµ' : Œµ < 1) :
    ‚àÉ T : Finset ‚Ñï, ‚àÄ s, 1 < s ‚Üí
      (s - 1) * ‚àë n ‚àà T, a n ^ (- s) +
        (1 - Œµ) ^ s * (s - 1) * ‚àë' n : ‚Üë((T : Set ‚Ñï)·∂ú), (n : ‚Ñù) ^ (- s) <
          (s - 1) * ‚àë' n, a n ^ (- s) ‚àß
          (s - 1) * ‚àë' n, a n ^ (- s) <
        (s - 1) * ‚àë n ‚àà T, a n ^ (- s) +
      (1 + Œµ) ^ s * (s - 1) * ‚àë' n : ‚Üë((T : Set ‚Ñï)·∂ú), (n : ‚Ñù) ^ (- s) := by
  obtain ‚ü®N, hN‚ü© := eventually_atTop.mp (result1' a h1 h2 Œµ hŒµ)
  set T := Finset.range N
  refine ‚ü®T, fun s hs ‚Ü¶ ?_‚ü©
  constructor
  ¬∑ sorry
  ¬∑ calc
      _ = (s - 1) * ‚àë n ‚àà T, a n ^ (- s) + (s - 1) * ‚àë' (n : ‚Üë(T : Set ‚Ñï)·∂ú), a n ^ (- s) := ?_
      _ < (s - 1) * ‚àë n ‚àà T, a n ^ (- s) +
        (s - 1) * ‚àë' (n : ‚Üë(T : Set ‚Ñï)·∂ú), (1 + Œµ) ^ s * (n : ‚Ñù) ^ (- s) := ?_
      _ = (s - 1) * ‚àë n ‚àà T, a n ^ (-s) +
          (1 + Œµ) ^ s * (s - 1) * ‚àë' (n : ‚Üë(T : Set ‚Ñï)·∂ú), (n : ‚Ñù) ^ (- s) := ?_
    ¬∑ rw [‚Üê mul_add, sum_add_tsum_compl]
      exact result2 a h1 h2 hs
    ¬∑ gcongr
      ¬∑ sorry
      ¬∑ sorry
    ¬∑ rw [tsum_mul_left]
      ring

include h1 h2 in
lemma result6 :
    Tendsto (fun s : ‚Ñù ‚Ü¶ (s - 1) * ‚àë' n, a n ^ (- s)) (ùìù[>] 1) (ùìù 1) := by
  refine Metric.tendsto_nhdsWithin_nhds.mpr fun Œµ' hŒµ' ‚Ü¶ ?_
  let Œµ := min 1 Œµ'
  have hŒµ_pos : 0 < Œµ := by aesop
  have hŒµ3_pos : 0 < Œµ / 3 := by positivity
  have hŒµ3_lt : Œµ / 3 < 1 := lt_of_lt_of_le (div_lt_self hŒµ_pos (by norm_num)) (min_le_left 1 Œµ')
  obtain ‚ü®T, hT‚ü© := result5 a h1 h2 hŒµ3_pos hŒµ3_lt
  sorry

end Series

section

variable {ùïú : Type*} [NontriviallyNormedField ùïú] {E : Type*} [NormedAddCommGroup E]
  [NormedSpace ùïú E] {F : Type*} [NormedAddCommGroup F] [NormedSpace ùïú F]

open Metric

example {Œπ : Type*} [CompleteSpace E] {g : Œπ ‚Üí E ‚ÜíL[ùïú] F} (h : ‚àÄ x, ‚àÉ C, ‚àÄ i, ‚Äñg i x‚Äñ ‚â§ C) :
    ‚àÉ C', ‚àÄ i, ‚Äñg i‚Äñ ‚â§ C' := by
  -- sequence of subsets consisting of those `x : E` with norms `‚Äñg i x‚Äñ` bounded by `n`
  let e : ‚Ñï ‚Üí Set E := fun n ‚Ü¶ ‚ãÇ i : Œπ, { x : E | ‚Äñg i x‚Äñ ‚â§ n }
  -- each of these sets is closed
  have hc : ‚àÄ n : ‚Ñï, IsClosed (e n) := sorry
  -- the union is the entire space; this is where we use `h`
  have hU : (‚ãÉ n : ‚Ñï, e n) = univ := sorry
  /- apply the Baire category theorem to conclude that for some `m : ‚Ñï`,
       `e m` contains some `x` -/
  obtain ‚ü®m, x, hx‚ü© : ‚àÉ m, ‚àÉ x, x ‚àà interior (e m) := sorry
  obtain ‚ü®Œµ, Œµ_pos, hŒµ‚ü© : ‚àÉ Œµ > 0, ball x Œµ ‚äÜ interior (e m) := sorry
  obtain ‚ü®k, hk‚ü© : ‚àÉ k : ùïú, 1 < ‚Äñk‚Äñ := sorry
  -- show all elements in the ball have norm bounded by `m` after applying any `g i`
  have real_norm_le : ‚àÄ z ‚àà ball x Œµ, ‚àÄ (i : Œπ), ‚Äñg i z‚Äñ ‚â§ m := sorry
  have Œµk_pos : 0 < Œµ / ‚Äñk‚Äñ := sorry
  refine ‚ü®(m + m : ‚Ñï) / (Œµ / ‚Äñk‚Äñ), fun i ‚Ü¶ ContinuousLinearMap.opNorm_le_of_shell Œµ_pos ?_ hk ?_‚ü©
  sorry
  sorry

end section
